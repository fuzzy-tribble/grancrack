#!/bin/bash

#### UNOFF. STRICT MODE
set -eo pipefail   # removed -u
IFS=$'\n\t'

#### CONSTANTS

PROG_NAME=$0
BANNER=banner.txt
USAGE=usage.txt
target_pass=
hints=

NONE='\033[00m'
RED='\033[01;31m'
GREEN='\033[01;32m'
YELLOW='\033[01;33m'
PURPLE='\033[01;35m'
CYAN='\033[01;36m'
WHITE='\033[01;37m'
BOLD='\033[1m'
LIGHT='\033[2m'
UNDERLINE='\033[4m'

#### FUNCTIONS

banner()
{
    cat $BANNER
}

usage() 
{
    cat $USAGE
}

calc_bruteforce_time()
{
    local pass=$1
    echo -e "${BOLD}Calculating search space size..."

    # Get search space depth
    local ss_depth=
    local digit_depth=10
    local lowercase_letter_depth=26
    local uppercase_letter_depth=26
    local symbol_depth=33
    
    # has digits?
    if [[ $pass =~ [0-9] ]];then
        echo -e "${LIGHT}Found digits (adding ${digit_depth} to search space depth)"
        (( ss_depth += digit_depth))
    fi

    # has lowercase letters?
    if [[ $pass =~ [a-z] ]];then
        echo -e "${LIGHT}Found lowercase letters (adding $lowercase_letter_depth to search space depth)..."
        (( ss_depth += lowercase_letter_depth))
    fi

    # has uppercase letters?
    if [[ $pass =~ [A-Z] ]];then
        echo -e "${LIGHT}Found uppercase letters (adding $uppercase_letter_depth to search space depth)..."
        (( ss_depth += uppercase_letter_depth))
    fi

    # has symbols (non-lettets and non-numbers)?
    if [[ $target_pass =~ [^A-Za-z0-9] ]];then
        echo -e "${LIGHT}Found symbols (adding $symbol_depth to search space depth)..."
        (( ss_depth += symbol_depth))
    fi

    echo -e "${CYAN}Search space DEPTH: $ss_depth"

    # Get search space length
    local ss_length=${#target_pass}
    echo -e "${CYAN}Search space LENGTH: $ss_length"

    # Get search space size (count all possible passwords with this alphabet size and up to this password's length)
    local ss_size=0
    for ((i = $ss_length ; i > 0 ; i--)); do
        (( ss_size += $((ss_depth**$i)) ))
    done
    echo -e "${CYAN}Search space SIZE: $ss_size"

    local online_attack=$((ss_size / 1000))
    local offline_attack=$((ss_size / 100000000000))
    local massive_attack=$((ss_size / 100000000000000))

    # Display results
    # TODO - beautify display (w/ table??)
    echo "Online attack scenario (1k guesses / second):"
    displaytime online_attack
    echo "Offline attack scenario (100b guesses / second):"
    displaytime offline_attack
    echo "Massive array attack scenario (100t guesses / second):"
    displaytime massive_attack
    echo "*Note that typical attacks will be online password guessing limited to, at most, a few hundred guesses per second*"  
}

displaytime() 
{
  local T=$1
  local Y=$((T/60/60/24/365))
  local D=$((T/60/60/24))
  local H=$((T/60/60%24))
  local M=$((T/60%60))
  local S=$((T%60))
  (( $Y > 0 )) && printf '%d years ' $Y
  (( $D > 0 )) && printf '%d days ' $D
  (( $H > 0 )) && printf '%d hours ' $H
  (( $M > 0 )) && printf '%d minutes ' $M
  (( $D > 0 || $H > 0 || $M > 0 )) && printf 'and '
  printf '%d seconds\n' $S
}

get_diff() 
{
    local pass=$1
    local hints=$2

    # lowercase password and hints
    local pass_low="$(tr [A-Z] [a-z] <<< "$pass")"
    local hints_low="$(tr [A-Z] [a-z] <<< "$hints")"

    echo "Here is the lowercase pasword: $pass_low"
    echo "Here is the lowercase hints: $hints_low"

    # substituted password and hints
    local pass_subs="$(tr '0378951' 'oetbgsl' <<< "$pass_low")"
    local hints_subs="$(tr '0378951' 'oetbgsl' <<< "$hints_low")"

    # create regex from hints list
    local hint_regex="$(tr ' ' '\b|' <<< "$hints_subs")"
    echo $hint_regex

    # collapse (subtract hints from pass)
    local remaining_pass="$(sed 's/$hint_regex//g' <<< "$pass_subs")"
    echo $remaining_pass

    echo -e "Bruteforce password search space collapsed from $pass to $remaining_pass based on hints provided"
    calc_bruteforce_time remaining_pass
}

#### MAIN

interactive=
filename=~/sysinfo_page.html

if [ $# -gt 0 ]; then
    while [ "$1" != "" ]; do
        case $1 in
            -t | --target )         shift
                                    target_pass=$1
                                    ;;
            -d | --details )         shift
                                    target_pass=$1
                                    ;;
            -i | --interactive )    interactive=1
                                    ;;
            -h | --help )           usage
                                    exit
                                    ;;
            * )                     usage
                                    exit 1
        esac
        shift
    done
else
    interactive=1
fi

# If running in interactive mode
if [ "$interactive" = "1" ]; then

    banner

    while [[ -z "$target_pass" ]]; do
        echo -n "What is the ancient's password (required)? > "
        read target_pass
    done

    echo -n "Got any hints for me (optional)? > "
    read hints

    if [ -z "$hints" ]; then
        echo -e "Calculating time for ${BOLD}$target_pass${NONE} with no hints (bruteforce time)${NONE}"
        calc_bruteforce_time "$target_pass"
    else
        echo -e "Calculating time for ${BOLD}$target_pass${NONE} with hints: ${BOLD}$hints${NONE}"
        get_diff "$target_pass" "$hints"
    fi
fi