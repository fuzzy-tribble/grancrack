#!/bin/bash

#### UNOFF. STRICT MODE
set -eo pipefail   # removed -u
IFS=$'\n\t'
# -e -> fail on first error

#### UTILS
source util.bash

#### CONSTANTS

DEBUG=1

SCRIPT_ARGS="$@"
SCRIPT_NAME="$0"

BANNER=banner.txt
USAGE=usage.txt

target_pass=
hints=
online_attack=
offline_attack=
massive_attack=

# TODO - apparently colors don't show for everyone...look into it
NONE="\033[00m"
RED="\033[01;31m"
GREEN="\033[01;32m"
YELLOW="\033[01;33m"
PURPLE="\033[01;35m"
CYAN="\033[01;36m"
WHITE="\033[01;37m"
BOLD="\033[1m"
LIGHT="\033[2m"
UNDERLINE="\033[4m"

DISCLAIMER="\n\n${RED}DISCLAIMERS
 \n - This is NOT a password strength calculator (it just calculates search space size for a provided password with or without hints)
 \n - If you DO NOT PROVIDE HINTS then the search space size will be calculated as if the password were going to be bruteforced.
 \n - If you PROVIDE HINTS then the search space size will be collapsed based on the hints provided then whatever is remaining will be calculated as if the password were going to be bruteforces.
 \n\n - The ONLINE ATTACK SCENARIO assumes 1k guesses / second.
 \n - The OFFLINE ATTACK SCENARIO assumes 100 billion guesses / second.
 \n - The MASSIVE DISTRIBUTED ATTACK SCENARIO assumes 100 trillion guesses / second.
 \n - Typical attacks will be online password guessing and they are sometimes limited based on security measures on the server not taken into account here.
 \n\n${NONE}"

#### FUNCTIONS

if [ $DEBUG -eq "1" ]; then
    echo -e "${RED}DEBUG FLAG: ON${NONE}";
    dbg () { echo -e "${WHITE}[$(date +"%Y-%m-%d %H:%M:%S %Z")] [DEBUG] $1 ${NONE}"; }
else
    dbg () { :; }
fi

banner()
{
    # echo -e "${YELLOW}$(cat $BANNER)${NONE}"
    cat $BANNER
}

usage() 
{
    cat $USAGE
}

display_results()
{
    local pass=$1
    local hints=$2
    local header="SCENARIO,CRACKTIME EST. W/O HINTS, CRACKTIME EST. W/ HINTS"

    calc_search_space $pass
    local res_11=$(displaytime $online_attack)
    local res_21=$(displaytime $offline_attack)
    local res_31=$(displaytime $massive_attack)
    local res_12="no hints provided"
    local res_22="no hints provided"
    local res_32="no hints provided"
    if [ -n "$hints" ]; then
        get_diff $pass $hints
        res_12=$(displaytime $online_attack)
        res_22=$(displaytime $offline_attack)
        res_32=$(displaytime $massive_attack)
    fi
    
    local row1="ONLINE ATTACK,$res_11,$res_12"
    local row2="OFFLINE ATTACK,$res_21,$res_22"
    local row3="MASSIVE ARRAY ATTACK,$res_31,$res_32"

    printf "\n${WHITE}Target Password: ${CYAN}$pass${NONE}\n\n${WHITE}Hints: ${CYAN}$hints${NONE}\n\n"
    printTable ',' "$header\n$row1\n$row2\n$row3"
    echo -e $DISCLAIMER
}

calc_search_space()
{
    local pass=$1
    # TODO - test for input of nothing or len 1,2
    # TODO - test for max reasonable input size to calc with
    dbg "Estimating CRACK TIME for $pass"

    # Get search space depth
    local ss_depth=
    local digit_depth=10
    local lowercase_letter_depth=26
    local uppercase_letter_depth=26
    local symbol_depth=33
    
    # has digits?
    if [[ $pass =~ [0-9] ]];then
        dbg "Found digits (adding ${digit_depth} to search space depth)"
        (( ss_depth += digit_depth))
    fi

    # has lowercase letters?
    if [[ $pass =~ [a-z] ]];then
        dbg "Found lowercase letters (adding $lowercase_letter_depth to search space depth)"
        (( ss_depth += lowercase_letter_depth))
    fi

    # has uppercase letters?
    if [[ $pass =~ [A-Z] ]];then
        dbg "Found uppercase letters (adding $uppercase_letter_depth to search space depth)"
        (( ss_depth += uppercase_letter_depth))
    fi

    # has symbols (non-lettets and non-numbers)?
    if [[ $target_pass =~ [^A-Za-z0-9] ]];then
        dbg "Found symbols (adding $symbol_depth to search space depth)..."
        (( ss_depth += symbol_depth))
    fi

    # Get search space length
    local ss_length=${#pass}

    # Get search space size (count all possible passwords with this alphabet size and up to this password's length)
    local ss_size=0
    for ((i = $ss_length ; i > 0 ; i--)); do
        (( ss_size += $((ss_depth**$i)) ))
    done

    if [ $ss_size -lt 0 ]; then
        dbg "Search space size is longer than bash can calc w/o o'flow"
    fi

    dbg "Search space DEPTH / LENGTH / SIZE: $ss_depth / $ss_length / $ss_size"

    online_attack=$((ss_size / 1000))
    offline_attack=$((ss_size / 100000000000))
    massive_attack=$((ss_size / 100000000000000))
}

displaytime() 
{
  local T=$1
  if [ $T -lt 0 ]; then
    printf "A really long time (longer than bash can calc w/o o'flow)"
  else
    local Y=$((T/60/60/24/365))
    local D=$((T/60/60/24))
    local H=$((T/60/60%24))
    local M=$((T/60%60))
    local S=$((T%60))
    (( $Y > 0 )) && printf '%d years ' $Y
    (( $D > 0 )) && printf '%d days ' $D
    (( $H > 0 )) && printf '%d hours ' $H
    (( $M > 0 )) && printf '%d minutes ' $M
    (( $D > 0 || $H > 0 || $M > 0 )) && printf 'and '
    printf '%d seconds\n' $S
  fi
}

get_diff() 
{
    local pass=$1
    local hints=$2

    dbg "Using the following hints to try and collapse search space size: $hints"

    # lowercase password and hints
    local pass_low="$(tr [A-Z] [a-z] <<< "$pass")"
    local hints_low="$(tr [A-Z] [a-z] <<< "$hints")"

    # substituted password and hints
    local pass_subs="$(tr '0378951' 'oetbgsl' <<< "$pass_low")"
    local hints_subs="$(tr '0378951' 'oetbgsl' <<< "$hints_low")"

    dbg "pass: $pass -> $pass_low -> $pass_subs"
    dbg "hints: $hints -> $hints_low -> $hints_subs"

    # create regex from hints list
    # TODO - fig out how to do this without a loop (1 sed expression)
    local hint_regex="($(sed -E 's# #|#g' <<< "$hints_subs"))*"

    dbg "hint_regex: $hint_regex"

    # collapse (subtract hints from pass)
    local remaining_pass="$(sed -E "s/${hint_regex}//g" <<< "$pass_subs")"
    
    dbg "remaining_pass: $remaining_pass"

    # TODO - if letters <-> numbers then put some nums back

    dbg "With the hints provided the search space for password $pass can be collapsed to $remaining_pass"
    calc_search_space $remaining_pass
}

#### MAIN

interactive=
filename=~/sysinfo_page.html

if [ $# -gt 0 ]; then
    while [ "$1" != "" ]; do
        case $1 in
            -t | --target )         shift
                                    target_pass=$1
                                    ;;
            -i | --interactive )    interactive=1
                                    ;;
            -h | --help )           usage
                                    exit
                                    ;;
            * )                     usage
                                    exit 1
        esac
        shift
    done
else
    interactive=1
fi

# If running in interactive mode
if [ "$interactive" = "1" ]; then

    banner

    while [[ -z "$target_pass" ]]; do
        echo -ne "What is the ancient's password (required)? > "
        read target_pass
    done

    echo -ne "Got any hints for me (optional)? > "
    read hints

    display_results $target_pass $hints
fi